# vars this task expects
#        pvc_namespace: "{{ item.pvc_namespace }}"
#        pvc_name: "{{ item.pvc_name }}"
#        pod_name: "{{ pvc_name }}-ssh-rync"
#        svc_name: "{{ pvc_namespace }}-ssh"
#        volume_name: "{{ item.volume_name }}"
#        secret_name: "{{ pod_name }}-public-key"
#        bound_pod_uid: "{{ item.bound_pod_uid }}"
#        mig_source_host: "{{ item.node_name }}"

- debug: msg="{{ item }}"

################### Experimental #############################
# TODO: inject dynamic public key
# try with poststart hook to get right permissions
#       lifecycle:
#          postStart:
#            exec:
#              command:
#                - /bin/sh
#                - -c
#                - cp /var/my-app-secrets/id_rsa /var/my-app/id_rsa
#- name: create a secret for public key
#  k8s:
#    state: present
#    definition:
#      api_version: v1
#      kind: Secret
#      metadata:
#        name: "{{ secret_name }}"
#        namespace: "{{ pvc_namespace }}"
#      data:
#        authorized_keys: "{{ public_key }}"
###########################################################################

- set_fact:
    transfer_pod_wait_retries: 200
    transfer_svc_wait_retries: 600
    transfer_pod_delete_wait_retries: 200
    transfer_svc_delete_wait_retries: 200

- name: "Read public key"
  slurp:
    src: "{{ mig_dest_ssh_public_key }}"
  register: ssh_public_key

- name: "Get stunnel crt"
  slurp:
    src: "{{ stunnel_cert_filepath }}"
  register: stunnel_crt

- name: "Get stunnel key"
  slurp:
    src: "{{ stunnel_key_filepath }}"
  register: stunnel_key

- name: "Generate rsyncd password"
  set_fact:
    rsync_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"

- name: "Create rsyncd configmap"
  k8s:
    state: present
    definition: "{{ lookup('template', 'rsyncd.yml.j2') }}"

- name: "Create stunnel configmap"
  k8s:
    state: present
    definition: "{{ lookup('template', 'stunnel.yml.j2') }}"

- debug:
    msg: "{{ lookup('template', 'pod.yml.j2') }}"

- name: "Look up the cluster domain for route"
  k8s_info:
    api_version: operator.openshift.io/v1
    kind: IngressController
    name: "default"
    namespace: "openshift-ingress-operator"
  register: ingress_controller

- set_fact:
    route_host: "{{ route_name }}.{{ ingress_controller.resources[0].status.domain }}"
  when:
  - ingress_controller.resources | length > 0
  - ingress_controller.resources[0].get('status', {}).get('domain', '') != ''

- name: "Create a pod for rsync"
  k8s:
    state: present
    definition: "{{ lookup('template', 'pod.yml.j2') }}"

- name: "Create a route for rsync"
  k8s:
    state: present
    definition: "{{ lookup('template', 'svc.yml.j2') }}"

- name: "Wait for pod to be running"
  k8s_info:
    api_version: v1
    kind: pod
    name: "{{ pod_name }}"
    namespace: "{{ pvc_namespace }}"
  register: pod
  until: "'Running' in (pod | json_query('resources[].status.phase'))"
  retries: "{{ transfer_pod_wait_retries }}"
  delay: 3

- name: "Wait for svc to become ready"
  k8s_info:
    api_version: v1
    kind: service
    name: "{{ svc_name }}"
    namespace: "{{ pvc_namespace }}"
  register: svc
  until: " svc.resources is defined
            and svc.resources[0].status is defined"
  retries: "{{ transfer_svc_wait_retries }}"
  delay: 3

- name: "Wait for route to get admitted"
  k8s_facts:
    api_version: route.openshift.io/v1
    kind: route
    name: "{{ route_name }}"
    namespace: "{{ pvc_namespace }}"
  register: rsync_route
  until:
    - rsync_route.resources | length > 0
    - rsync_route.resources[0].get('spec', {}).get('host', '') != ''
    - rsync_route.resources[0].get('status', {}).get('ingress', []) | length > 0
    - (rsync_route.resources[0] | json_query("status.ingress[? routerName == 'default' ]") | length) > 0
    - (rsync_route.resources[0]| json_query('status.ingress[? routerName == `default` ].conditions') | flatten | json_query('[? type == `Admitted` && status == `True` ]') | flatten | length) > 0

- set_fact:
    failed_pvcs: []
    successful_pvcs: []

- name: "Run rsync for pvc synchronously"
  vars:
    pvc_ns: "{{ item.pvc_namespace }}"
    pvc_name: "{{ item.pvc_name }}"
    volume_name: "{{ item.volume_name }}"
    bound_pod_uid: "{{ item.bound_pod_uid }}"
    node_name: "{{ item.node_name }}"
    pvc_vol_safe_name: "{{ item.pvc_vol_safe_name }}"
  include_tasks: "tasks/rsync.yml"
  with_items: "{{ pvcs }}"

- name: "Cleanup the transfer pod for rsync"
  k8s:
    state: absent
    definition: "{{ lookup('template', 'pod.yml.j2') }}"
  when: cleanup_resources

- name: "Wait for pod to be deleted"
  k8s_info:
    api_version: v1
    kind: pod
    name: "{{ pod_name }}"
    namespace: "{{ pvc_namespace }}"
  register: p
  until: "{{ p.resources | length == 0 }}"
  retries: "{{ transfer_pod_delete_wait_retries }}"
  delay: 3
  when: cleanup_resources

- name: "Cleanup the service for rsync"
  k8s:
    state: absent
    definition: "{{ lookup('template', 'svc.yml.j2') }}"
  when: cleanup_resources

- name: "Wait for service to be deleted"
  k8s_info:
    api_version: v1
    kind: service
    name: "{{ svc_name }}"
    namespace: "{{ pvc_namespace }}"
  register: s
  until: "{{ s.resources | length == 0 }}"
  retries: "{{ transfer_svc_delete_wait_retries }}"
  delay: 3
  when: cleanup_resources

- name: "Cleanup the configmap for rsyncd"
  k8s:
    state: absent
    definition: "{{ lookup('template', 'rsyncd.yml.j2') }}"
  when: cleanup_resources

- name: "Cleanup the configmap for stunnel"
  k8s:
    state: absent
    definition: "{{ lookup('template', 'stunnel.yml.j2') }}"
  when: cleanup_resources

- name: "Printing failed / succeded pvcs"
  debug:
    msg: "{{ failed_pvcs }} {{ successful_pvcs }}"

- name: "Dumping failure report"
  copy:
    content: "{{ failed_pvcs | to_json }}"
    dest: "{{ failed_pvcs_dir }}/{{ pvc_namespace }}-failed.json"

- name: "Dumping success report"
  copy:
    content: "{{ successful_pvcs | to_json }}"
    dest: "{{ successful_pvcs_dir }}/{{ pvc_namespace }}-successful.json"
